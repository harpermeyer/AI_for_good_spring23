def compute_probs(neg,pos):
  p0 = neg/(neg+pos)
  p1 = pos/(neg+pos)
  return [p0,p1]

def test_it():
  return 'loaded'
  
  def cond_prob(table, evidence, evidence_value, target, target_value): 
  t_subset = up_table_subset(table, target, 'equals', target_value)  
  e_list = up_get_column(t_subset, evidence)  
  p_b_a = sum([1 if v==evidence_value else 0 for v in e_list])/len(e_list)  #count and divide
  return p_b_a 

def cond_probs_product (table, evidence_values, target_column, target_val):
 table_columns=up_list_column_names(table)
 evidence_columns= table_columns [:-1]
 evidence_complete= up_zip_lists(evidence_columns, evidence_values)
 cond_prob_list=[]
 for evidence_column, evidence_val in evidence_complete:
  cond_prob_value=cond_prob(flu_table_2, evidence_column, evidence_val,target_column, target_val)
  cond_prob_list += [cond_prob_value]
 partial_numerator= up_product(cond_prob_list)
 return partial_numerator
 
 def prior_prob (table, target, target_value):
  t_list = up_get_column(table, target)
  p_a = sum([1 if v==target_value else 0 for v in t_list])/len(t_list)
  return p_a

#naivebayes function

def naive_bayes(table, evidence_row, target):
  #compute P(Flu=0|...) by collecting cond_probs in a list, take the produce of the list, finally multiply by P(Flu=0)
 target_value= 0 
 result1= cond_probs_product(table, evidence_row, target, target_value)* prior_prob(table, target, target_value)

  #do same for P(Flu=1|...)
 target_value= 1 
 result2= cond_probs_product(table, evidence_row, target, target_value)* prior_prob(table, target, target_value)


  #Use compute_probs to get 2 probabilities
 neg, pos = compute_probs(result1, result2)
  
  #return your 2 results in a list
 return [neg, pos]
